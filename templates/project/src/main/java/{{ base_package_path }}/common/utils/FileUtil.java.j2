package {{ base_package }}.common.utils;

import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

/**
 * Utility class cung cấp các phương thức tiện ích để xử lý file.
 *

 * @version 1.0
 */
public final class FileUtil {

    private static final List<String> ALLOWED_IMAGE_TYPES = Arrays.asList(
            "image/jpeg", "image/png", "image/gif", "image/bmp"
    );
    private static final List<String> ALLOWED_DOCUMENT_TYPES = Arrays.asList(
            "application/pdf", "application/msword",
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "application/vnd.ms-excel",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    );
    private static final long MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB

    private FileUtil() {
        throw new IllegalStateException("Utility class");
    }

    /**
     * Kiểm tra xem file có phải là ảnh không
          * @param file File cần kiểm tra
     * @return true nếu là ảnh, false nếu ngược lại
     */
    public static boolean isImage(MultipartFile file) {
        return file != null && ALLOWED_IMAGE_TYPES.contains(file.getContentType());
    }

    /**
     * Kiểm tra xem file có phải là tài liệu không
          * @param file File cần kiểm tra
     * @return true nếu là tài liệu, false nếu ngược lại
     */
    public static boolean isDocument(MultipartFile file) {
        return file != null && ALLOWED_DOCUMENT_TYPES.contains(file.getContentType());
    }

    /**
     * Kiểm tra kích thước file
          * @param file File cần kiểm tra
     * @return true nếu kích thước hợp lệ, false nếu ngược lại
     */
    public static boolean isValidFileSize(MultipartFile file) {
        return file != null && file.getSize() <= MAX_FILE_SIZE;
    }

    /**
     * Lấy phần mở rộng của file
          * @param fileName Tên file
     * @return Phần mở rộng của file
     */
    public static String getFileExtension(String fileName) {
        if (fileName == null || fileName.lastIndexOf(".") == -1) {
            return "";
        }
        return fileName.substring(fileName.lastIndexOf(".") + 1);
    }

    /**
     * Tạo tên file mới với UUID
          * @param originalFileName Tên file gốc
     * @return Tên file mới
     */
    public static String generateFileName(String originalFileName) {
        String extension = getFileExtension(originalFileName);
        return UUID.randomUUID().toString() + (extension.isEmpty() ? "" : "." + extension);
    }

    /**
     * Lưu file vào thư mục
          * @param file File cần lưu
     * @param directory Thư mục đích
     * @return Đường dẫn file đã lưu
     * @throws IOException nếu có lỗi khi lưu file
     */
    public static String saveFile(MultipartFile file, String directory) throws IOException {
        if (file == null || file.isEmpty()) {
            throw new IllegalArgumentException("File is empty");
        }

        // Tạo thư mục nếu chưa tồn tại
        Path directoryPath = Paths.get(directory);
        if (!Files.exists(directoryPath)) {
            Files.createDirectories(directoryPath);
        }

        // Tạo tên file mới
        String fileName = generateFileName(file.getOriginalFilename());
        Path filePath = directoryPath.resolve(fileName);

        // Lưu file
        Files.copy(file.getInputStream(), filePath);

        return filePath.toString();
    }

    /**
     * Xóa file
          * @param filePath Đường dẫn file cần xóa
     * @return true nếu xóa thành công, false nếu ngược lại
     */
    public static boolean deleteFile(String filePath) {
        try {
            return Files.deleteIfExists(Paths.get(filePath));
        } catch (IOException e) {
            return false;
        }
    }

    /**
     * Lấy kích thước file dưới dạng chuỗi đọc được
          * @param size Kích thước file (bytes)
     * @return Chuỗi kích thước file
     */
    public static String getReadableFileSize(long size) {
        if (size <= 0) {
            return "0";
        }
        final String[] units = new String[]{"B", "KB", "MB", "GB", "TB"};
        int digitGroups = (int) (Math.log10(size) / Math.log10(1024));
        return String.format("%.1f %s", size / Math.pow(1024, digitGroups), units[digitGroups]);
    }

    /**
     * Kiểm tra xem file có tồn tại không
          * @param filePath Đường dẫn file cần kiểm tra
     * @return true nếu file tồn tại, false nếu ngược lại
     */
    public static boolean exists(String filePath) {
        return Files.exists(Paths.get(filePath));
    }

    /**
     * Tạo thư mục nếu chưa tồn tại
          * @param directory Đường dẫn thư mục cần tạo
     * @throws IOException nếu có lỗi khi tạo thư mục
     */
    public static void createDirectoryIfNotExists(String directory) throws IOException {
        Path directoryPath = Paths.get(directory);
        if (!Files.exists(directoryPath)) {
            Files.createDirectories(directoryPath);
        }
    }
} 