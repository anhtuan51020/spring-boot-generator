package {{ base_package }}.common.utils;

import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAdjusters;
import java.util.Date;

/**
 * Utility class cung cấp các phương thức tiện ích để xử lý ngày tháng.
 *

 * @version 1.0
 */
public final class DateUtil {

    private static final String DEFAULT_DATE_FORMAT = "yyyy-MM-dd";
    private static final String DEFAULT_TIME_FORMAT = "HH:mm:ss";
    private static final String DEFAULT_DATETIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
    private static final ZoneId DEFAULT_ZONE = ZoneId.systemDefault();

    private DateUtil() {
        throw new IllegalStateException("Utility class");
    }

    /**
     * Chuyển đổi LocalDate thành Date
          * @param localDate LocalDate cần chuyển đổi
     * @return Date tương ứng
     */
    public static Date toDate(LocalDate localDate) {
        return Date.from(localDate.atStartOfDay(DEFAULT_ZONE).toInstant());
    }

    /**
     * Chuyển đổi LocalDateTime thành Date
          * @param localDateTime LocalDateTime cần chuyển đổi
     * @return Date tương ứng
     */
    public static Date toDate(LocalDateTime localDateTime) {
        return Date.from(localDateTime.atZone(DEFAULT_ZONE).toInstant());
    }

    /**
     * Chuyển đổi Date thành LocalDate
          * @param date Date cần chuyển đổi
     * @return LocalDate tương ứng
     */
    public static LocalDate toLocalDate(Date date) {
        return date.toInstant().atZone(DEFAULT_ZONE).toLocalDate();
    }

    /**
     * Chuyển đổi Date thành LocalDateTime
          * @param date Date cần chuyển đổi
     * @return LocalDateTime tương ứng
     */
    public static LocalDateTime toLocalDateTime(Date date) {
        return date.toInstant().atZone(DEFAULT_ZONE).toLocalDateTime();
    }

    /**
     * Format LocalDate thành chuỗi theo định dạng mặc định
          * @param localDate LocalDate cần format
     * @return Chuỗi đã format
     */
    public static String formatDate(LocalDate localDate) {
        return localDate.format(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT));
    }

    /**
     * Format LocalDateTime thành chuỗi theo định dạng mặc định
          * @param localDateTime LocalDateTime cần format
     * @return Chuỗi đã format
     */
    public static String formatDateTime(LocalDateTime localDateTime) {
        return localDateTime.format(DateTimeFormatter.ofPattern(DEFAULT_DATETIME_FORMAT));
    }

    /**
     * Parse chuỗi thành LocalDate theo định dạng mặc định
          * @param dateStr Chuỗi cần parse
     * @return LocalDate tương ứng
     */
    public static LocalDate parseDate(String dateStr) {
        return LocalDate.parse(dateStr, DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT));
    }

    /**
     * Parse chuỗi thành LocalDateTime theo định dạng mặc định
          * @param dateTimeStr Chuỗi cần parse
     * @return LocalDateTime tương ứng
     */
    public static LocalDateTime parseDateTime(String dateTimeStr) {
        return LocalDateTime.parse(dateTimeStr, DateTimeFormatter.ofPattern(DEFAULT_DATETIME_FORMAT));
    }

    /**
     * Lấy ngày đầu tiên của tháng
          * @param localDate Ngày cần lấy
     * @return Ngày đầu tiên của tháng
     */
    public static LocalDate getFirstDayOfMonth(LocalDate localDate) {
        return localDate.with(TemporalAdjusters.firstDayOfMonth());
    }

    /**
     * Lấy ngày cuối cùng của tháng
          * @param localDate Ngày cần lấy
     * @return Ngày cuối cùng của tháng
     */
    public static LocalDate getLastDayOfMonth(LocalDate localDate) {
        return localDate.with(TemporalAdjusters.lastDayOfMonth());
    }

    /**
     * Tính số ngày giữa hai ngày
          * @param startDate Ngày bắt đầu
     * @param endDate Ngày kết thúc
     * @return Số ngày
     */
    public static long daysBetween(LocalDate startDate, LocalDate endDate) {
        return ChronoUnit.DAYS.between(startDate, endDate);
    }

    /**
     * Tính số tháng giữa hai ngày
          * @param startDate Ngày bắt đầu
     * @param endDate Ngày kết thúc
     * @return Số tháng
     */
    public static long monthsBetween(LocalDate startDate, LocalDate endDate) {
        return ChronoUnit.MONTHS.between(startDate, endDate);
    }

    /**
     * Tính số năm giữa hai ngày
          * @param startDate Ngày bắt đầu
     * @param endDate Ngày kết thúc
     * @return Số năm
     */
    public static long yearsBetween(LocalDate startDate, LocalDate endDate) {
        return ChronoUnit.YEARS.between(startDate, endDate);
    }

    /**
     * Kiểm tra xem một ngày có nằm trong khoảng thời gian không
          * @param date Ngày cần kiểm tra
     * @param startDate Ngày bắt đầu
     * @param endDate Ngày kết thúc
     * @return true nếu ngày nằm trong khoảng, false nếu ngược lại
     */
    public static boolean isDateBetween(LocalDate date, LocalDate startDate, LocalDate endDate) {
        return !date.isBefore(startDate) && !date.isAfter(endDate);
    }

    /**
     * Lấy thời gian hiện tại theo timezone mặc định
          * @return LocalDateTime hiện tại
     */
    public static LocalDateTime now() {
        return LocalDateTime.now(DEFAULT_ZONE);
    }

    /**
     * Lấy ngày hiện tại theo timezone mặc định
          * @return LocalDate hiện tại
     */
    public static LocalDate today() {
        return LocalDate.now(DEFAULT_ZONE);
    }
} 