package {{ j2_base_package }}.aspect;

import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.*;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Component;

@Aspect
@Component
@Slf4j
public class LoggingAspect {

    private final ThreadLocal<Long> startTime = new ThreadLocal<>();
    private final ThreadLocal<String> className = new ThreadLocal<>();
    private final ThreadLocal<String> functionName = new ThreadLocal<>();

    @Pointcut("within(@org.springframework.stereotype.Service *) || within(@org.springframework.web.bind.annotation.RestController *)")
    public void serviceOrControllerMethods() {}

    @Before("serviceOrControllerMethods()")
    public void logBefore(JoinPoint joinPoint) {
        startTime.set(System.currentTimeMillis());

        className.set(joinPoint.getSignature().getDeclaringTypeName());
        functionName.set(joinPoint.getSignature().getName());
    }

    @AfterReturning(pointcut = "serviceOrControllerMethods()", returning = "result")
    public void logAfter(JoinPoint joinPoint, Object result) {
        long duration = System.currentTimeMillis() - startTime.get();

        String classNameStr = className.get();
        String functionNameStr = functionName.get();
        String username = getCurrentUsername();

        log.info("\nclassName:     {}\nfunctionName:  {}\nuser:          {}\ntimeExecuted:  {} ms",
                 classNameStr, functionNameStr, username, duration);

        startTime.remove();
        className.remove();
        functionName.remove();
    }

    private String getCurrentUsername() {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            return (auth != null && auth.isAuthenticated()) ? auth.getName() : "anonymous";
        } catch (Exception e) {
            return "unknown";
        }
    }
}
