package {{ j2_base_package }}.service.impl;

import {{ j2_base_package }}.dto.BaseDTO;
import {{ j2_base_package }}.entity.BaseEntity;
import {{ j2_base_package }}.mapper.BaseMapper;
import {{ j2_base_package }}.repository.BaseRepository;
import {{ j2_base_package }}.service.BaseService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.io.Serializable;

import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public abstract class BaseServiceImpl<T extends BaseEntity, ID extends Serializable, DTO extends BaseDTO> implements BaseService<T, ID, DTO> {

    protected abstract BaseRepository<T, ID> getRepository();
    protected abstract BaseMapper<DTO, T> getMapper();

    @Override
    public List<DTO> findAll() {
        return getRepository().findAll().stream()
                .map(getMapper()::toDto)
                .toList();
    }

    @Override
    public Page<DTO> findAll(Pageable pageable) {
        return getRepository().findAll(pageable)
                .map(getMapper()::toDto);
    }

    @Override
    public Optional<DTO> findById(ID id) {
        return getRepository().findById(id)
                .map(getMapper()::toDto);
    }

    @Override
    @Transactional
    public DTO create(DTO dto) {
        T entity = getMapper().toEntity(dto);
        entity = getRepository().save(entity);
        return getMapper().toDto(entity);
    }

    @Override
    @Transactional
    public Optional<DTO> update(ID id, DTO dto) {
        return getRepository().findById(id)
                .map(entity -> {
                    getMapper().partialUpdate(entity, dto);
                    entity = getRepository().save(entity);
                    return getMapper().toDto(entity);
                });
    }

    @Override
    @Transactional
    public boolean delete(ID id) {
        return getRepository().findById(id)
                .map(entity -> {
                    getRepository().delete(entity);
                    return true;
                })
                .orElse(false);
    }
}